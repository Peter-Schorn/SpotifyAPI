{"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager"},{"type":"text","text":" property of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI"},{"type":"text","text":" class is what contains the authorization information. It always conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":". It is this property that you should encode to data using a "},{"type":"codeVoice","code":"JSONEncoder"},{"type":"text","text":" and save to persistent storage. You can then retrieve this data from persistent storage at a later time and decode it using a "},{"type":"codeVoice","code":"JSONDecoder"},{"type":"text","text":". Note that the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager"},{"type":"text","text":" property is a mutable "},{"type":"codeVoice","code":"var"},{"type":"text","text":" property; you can retrieve the authorization information from storage as many times as you need to and assign it to this property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You must keep in mind the fact that the access token expires after an hour. This library automatically refreshes the access token when necessary, so you shouldn’t have to worry about refreshing it manually, although you do have to make sure that you re-save the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager"},{"type":"text","text":" property to persistent storage every time this happens. This is why "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI"},{"type":"text","text":" has an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManagerDidChange"},{"type":"text","text":" "},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":", which emits any time that the authorization information changes. Subscribe to this publisher so that you can re-save "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager"},{"type":"text","text":" to persistent storage every time this publisher emits. "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI"},{"type":"text","text":" also has an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManagerDidDeauthorize"},{"type":"text","text":" "},{"type":"codeVoice","code":"PassthroughSubject"},{"type":"text","text":" that emits whenever "},{"type":"codeVoice","code":"SpotifyAPI.authorizationManager.deauthorize()"},{"type":"text","text":" is called. Subscribe to this publisher in order to remove the authorization information from persistent storage."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The authorization information is sensitive, so "},{"type":"emphasis","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" save it to UserDefaults. Instead, you are encouraged to save it to the keychain or to encrypt it yourself and save it to a secure location."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following examples use Kishikawa’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/kishikawakatsumi\/KeychainAccess"},{"type":"text","text":" library to save the authorization information to the keychain."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here is a class which manages an instance of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI"},{"type":"text","text":"; it uses "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/AuthorizationCodeFlowManager"},{"type":"text","text":" for the authorization process, but similar steps apply to the other authorization managers as well. It subscribes to changes to the authorization information and saves them to the keychain and provides a convenience method for authorizing the application. It also conforms to the "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" object protocol, which means that you can use it inside of a SwiftUI view."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You are strongly encouraged to inject an instance of this class into the root of your view hierarchy as an environment object using the "},{"type":"codeVoice","code":"environmentObject(_:)"},{"type":"text","text":" view modifier."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See also this "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/Peter-Schorn\/SpotifyAPIExampleApp"},{"type":"text","text":", which uses this class."}]},{"type":"codeListing","syntax":"swift","code":["import Foundation","import Combine","import UIKit","import KeychainAccess","import SpotifyWebAPI","","\/**"," A helper class that wraps around an instance of `SpotifyAPI` and provides"," convenience methods for authorizing your application.",""," Its most important role is to handle changes to the authorization information"," and save them to persistent storage in the keychain."," *\/","final class Spotify: ObservableObject {","    ","    private static let clientId: String = {","        if let clientId = ProcessInfo.processInfo","            .environment[\"CLIENT_ID\"] {","            return clientId","        }","        fatalError(\"Could not find 'CLIENT_ID' in environment variables\")","    }()","    ","    private static let clientSecret: String = {","        if let clientSecret = ProcessInfo.processInfo","            .environment[\"CLIENT_SECRET\"] {","            return clientSecret","        }","        fatalError(\"Could not find 'CLIENT_SECRET' in environment variables\")","    }()","    ","    \/\/\/ The key in the keychain that is used to store the authorization","    \/\/\/ information: \"authorizationManager\".","    static let authorizationManagerKey = \"authorizationManager\"","    ","    \/\/\/ The URL that Spotify will redirect to after the user either authorizes","    \/\/\/ or denies authorization for your application.","    static let loginCallbackURL = URL(","        string: \"spotify-api-example-app:\/\/login-callback\"","    )!","    ","    \/\/\/ A cryptographically-secure random string used to ensure than an incoming","    \/\/\/ redirect from Spotify was the result of a request made by this app, and","    \/\/\/ not an attacker. **This value should be regenerated after each**","    \/\/\/ **authorization process completes.**","    var authorizationState = String.randomURLSafe(length: 128)","    ","    \/**","     Whether or not the application has been authorized. If `true`, then you can","     begin making requests to the Spotify web API using the `api` property of","     this class, which contains an instance of `SpotifyAPI`.","","     This property provides a convenient way for the user interface to be","     updated based on whether the user has logged in with their Spotify account","     yet. For example, you could use this property disable UI elements that","     require the user to be logged in.","","     This property is updated by `authorizationManagerDidChange()`, which is","     called every time the authorization information changes, and","     `authorizationManagerDidDeauthorize()`, which is called every time","     `SpotifyAPI.authorizationManager.deauthorize()` is called.","     *\/","    @Published var isAuthorized = false","    ","    \/\/\/ The keychain to store the authorization information in.","    private let keychain = Keychain(service: \"com.Peter-Schorn.SpotifyAPIApp\")","    ","    \/\/\/ An instance of `SpotifyAPI` that you use to make requests to the Spotify","    \/\/\/ web API.","    let api = SpotifyAPI(","        authorizationManager: AuthorizationCodeFlowManager(","            clientId: Spotify.clientId, clientSecret: Spotify.clientSecret","        )","    )","    ","    var cancellables: [AnyCancellable] = []","    ","    init() {","        ","        \/\/ MARK: Important: Subscribe to `authorizationManagerDidChange` BEFORE","        \/\/ MARK: retrieving `authorizationManager` from persistent storage","        self.api.authorizationManagerDidChange","            \/\/ We must receive on the main thread because we are updating the","            \/\/ @Published `isAuthorized` property.","            .receive(on: RunLoop.main)","            .sink(receiveValue: authorizationManagerDidChange)","            .store(in: &cancellables)","        ","        self.api.authorizationManagerDidDeauthorize","            .receive(on: RunLoop.main)","            .sink(receiveValue: authorizationManagerDidDeauthorize)","            .store(in: &cancellables)","        ","        \/\/ Check to see if the authorization information is saved in the","        \/\/ keychain.","        if let authManagerData = keychain[data: Self.authorizationManagerKey] {","            do {","                \/\/ Try to decode the data.","                let authorizationManager = try JSONDecoder().decode(","                    AuthorizationCodeFlowManager.self,","                    from: authManagerData","                )","                ","                \/*","                 This assignment causes `authorizationManagerDidChange` to emit","                 a signal, meaning that `authorizationManagerDidChange()` will","                 be called.","","                 Note that if you had subscribed to","                 `authorizationManagerDidChange` after this line, then","                 `authorizationManagerDidChange()` would not have been called","                 and the @Published `isAuthorized` property would not have been","                 properly updated.","","                 We do not need to update `self.isAuthorized` here because that","                 is already handled in `authorizationManagerDidChange()`.","                 *\/","                self.api.authorizationManager = authorizationManager","                ","            } catch {","                print(\"could not decode authorizationManager from data:\\n\\(error)\")","            }","        }","        else {","            print(\"did not find authorization information in keychain\")","        }","        ","    }","    ","    \/**","     A convenience method that creates the authorization URL and opens it in the","     browser.","","     You could also configure it to accept parameters for the authorization","     scopes","     *\/","    func authorize() {","        ","        let authorizationURL = api.authorizationManager.makeAuthorizationURL(","            redirectURI: Self.loginCallbackURL,","            showDialog: true,","            \/\/ This same value **MUST** be provided for the state parameter of","            \/\/ `authorizationManager.requestAccessAndRefreshTokens(redirectURIWithQuery:state:)`.","            \/\/ Otherwise, an error will be thrown.","            state: self.authorizationState,","            scopes: [","                .userReadPlaybackState, .userReadEmail, .userLibraryModify","            ]","        )!","        ","        \/\/ You can open the URL however you like. For example, you could open it","        \/\/ in a web view instead of the browser.","        \/\/ See https:\/\/developer.apple.com\/documentation\/webkit\/wkwebview","        UIApplication.shared.open(authorizationURL)","        ","    }","    ","    \/**","     Saves changes to `api.authorizationManager` to the keychain.","","     This method is called every time the authorization information changes. For","     example, when the access token gets automatically refreshed, (it expires","     after an hour) this method will be called.","","     It will also be called after the access and refresh tokens are retrieved","     using `requestAccessAndRefreshTokens(redirectURIWithQuery:state:)`.","     *\/","    func authorizationManagerDidChange() {","        ","        \/\/ Update the @Published `isAuthorized` property.","        self.isAuthorized = self.api.authorizationManager.isAuthorized()","        ","        do {","            \/\/ Encode the authorization information to data.","            let authManagerData = try JSONEncoder().encode(self.api.authorizationManager)","            ","            \/\/ Save the data to the keychain.","            self.keychain[data: Self.authorizationManagerKey] = authManagerData","            ","        } catch {","            print(","                \"couldn't encode authorizationManager for storage in the \" +","                \"keychain:\\n\\(error)\"","            )","        }","        ","    }","    ","    \/**","     Removes `api.authorizationManager` from the keychain.","     ","     This method is called every time `api.authorizationManager.deauthorize` is","     called.","     *\/","    func authorizationManagerDidDeauthorize() {","        ","        self.isAuthorized = false","        ","        do {","            \/*","             Remove the authorization information from the keychain.","","             If you don't do this, then the authorization information that you","             just removed from memory by calling `deauthorize()` will be","             retrieved again from persistent storage after this app is quit and","             relaunched.","             *\/","            try self.keychain.remove(Self.authorizationManagerKey)","            print(\"did remove authorization manager from keychain\")","            ","        } catch {","            print(","                \"couldn't remove authorization manager from keychain: \\(error)\"","            )","        }","    }","    ","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/spotifywebapi\/saving-the-authorization-information-to-persistent-storage"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Saving-the-Authorization-Information-to-Persistent-Storage","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Save the authorization information to persistent storage so that the user does not have to login again every time the application is quit and re-launched."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Saving the Authorization Information to Persistent Storage","role":"article","modules":[{"name":"SpotifyWebAPI"}]},"hierarchy":{"paths":[["doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Using-the-Player-Endpoints","doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Working-with-Paginated-Results","doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Debugging","doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Running-the-Unit-Tests"],"generated":true}],"references":{"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/Debugging":{"role":"article","title":"Debugging","abstract":[{"type":"text","text":"Debug issues and configure logging."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Debugging","kind":"article","type":"topic","url":"\/documentation\/spotifywebapi\/debugging"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/SpotifyAPI":{"role":"symbol","title":"SpotifyAPI","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"SpotifyAPI"}],"abstract":[{"type":"text","text":"The central class in this library. Provides methods for all of the Spotify web"},{"type":"text","text":" "},{"type":"text","text":"API endpoints and contains an authorization manager for managing the"},{"type":"text","text":" "},{"type":"text","text":"authorization process of your application."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SpotifyAPI"}],"url":"\/documentation\/spotifywebapi\/spotifyapi"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/AuthorizationCodeFlowManager":{"role":"symbol","title":"AuthorizationCodeFlowManager","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AuthorizationCodeFlowManager"}],"abstract":[{"type":"text","text":"Manages the authorization process for the Authorization Code Flow."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/AuthorizationCodeFlowManager","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"AuthorizationCodeFlowManager"}],"url":"\/documentation\/spotifywebapi\/authorizationcodeflowmanager"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/SpotifyAPI/authorizationManagerDidDeauthorize":{"role":"symbol","title":"authorizationManagerDidDeauthorize","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"authorizationManagerDidDeauthorize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PassthroughSubject","preciseIdentifier":"s:7Combine18PassthroughSubjectC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A publisher that emits after the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAuthorizationManager\/deauthorize()"},{"type":"text","text":" method of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager"},{"type":"text","text":" is called."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManagerDidDeauthorize","kind":"symbol","type":"topic","url":"\/documentation\/spotifywebapi\/spotifyapi\/authorizationmanagerdiddeauthorize"},"https://github.com/Peter-Schorn/SpotifyAPIExampleApp":{"title":"example app","titleInlineContent":[{"type":"text","text":"example app"}],"type":"link","identifier":"https:\/\/github.com\/Peter-Schorn\/SpotifyAPIExampleApp","url":"https:\/\/github.com\/Peter-Schorn\/SpotifyAPIExampleApp"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/SpotifyAuthorizationManager/deauthorize()":{"role":"symbol","title":"deauthorize()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"deauthorize"},{"kind":"text","text":"()"}],"abstract":[{"type":"text","text":"Sets the credentials for the authorization manager to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAuthorizationManager\/deauthorize()","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/spotifywebapi\/spotifyauthorizationmanager\/deauthorize()"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/SpotifyAPI/authorizationManager":{"role":"symbol","title":"authorizationManager","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"authorizationManager"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AuthorizationManager"}],"abstract":[{"type":"text","text":"Manages the authorization process for your application and contains all the"},{"type":"text","text":" "},{"type":"text","text":"authorization information."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManager","kind":"symbol","type":"topic","url":"\/documentation\/spotifywebapi\/spotifyapi\/authorizationmanager"},"https://github.com/kishikawakatsumi/KeychainAccess":{"title":"Keychain Access","titleInlineContent":[{"type":"text","text":"Keychain Access"}],"type":"link","identifier":"https:\/\/github.com\/kishikawakatsumi\/KeychainAccess","url":"https:\/\/github.com\/kishikawakatsumi\/KeychainAccess"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/SpotifyAPI/authorizationManagerDidChange":{"role":"symbol","title":"authorizationManagerDidChange","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"authorizationManagerDidChange"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PassthroughSubject","preciseIdentifier":"s:7Combine18PassthroughSubjectC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Never","preciseIdentifier":"s:s5NeverO"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"A publisher that emits whenever the authorization information changes."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/SpotifyAPI\/authorizationManagerDidChange","kind":"symbol","type":"topic","url":"\/documentation\/spotifywebapi\/spotifyapi\/authorizationmanagerdidchange"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/Working-with-Paginated-Results":{"role":"article","title":"Working with Paginated Results","abstract":[{"type":"text","text":"Retrieve additional pages from an endpoint that returns paginated results."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Working-with-Paginated-Results","kind":"article","type":"topic","url":"\/documentation\/spotifywebapi\/working-with-paginated-results"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/Running-the-Unit-Tests":{"role":"article","title":"Running the Unit Tests","abstract":[{"type":"text","text":"Run the unit tests and ensure your backend server is correctly configured."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Running-the-Unit-Tests","kind":"article","type":"topic","url":"\/documentation\/spotifywebapi\/running-the-unit-tests"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI":{"role":"collection","title":"SpotifyWebAPI","abstract":[{"type":"text","text":"A Swift library for the Spotify web API"}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI","kind":"symbol","type":"topic","url":"\/documentation\/spotifywebapi"},"doc://SpotifyWebAPI/documentation/SpotifyWebAPI/Using-the-Player-Endpoints":{"role":"article","title":"Using the Player Endpoints","abstract":[{"type":"text","text":"Use the SpotifyAPI player endpoints."}],"identifier":"doc:\/\/SpotifyWebAPI\/documentation\/SpotifyWebAPI\/Using-the-Player-Endpoints","kind":"article","type":"topic","url":"\/documentation\/spotifywebapi\/using-the-player-endpoints"}}}